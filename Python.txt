PYTHON
VARIABLE DEFINITION
x=1
no colons or keywords required.

FUNCTION DEFINTION
def add_num(x, y):
	return x+y
add_num(1,2)

we have keyword None which is similar to null
def add_numbers(x,y,z=None): # null default parameters must come at end
    if (z==None):
        return x+y
    else:
        return x+y+z

print(add_numbers(1, 2))
print(add_numbers(1, 2, 3))

`add_numbers` updated to take an optional flag parameter.
def add_numbers(x, y, z=None, flag=False):
    if (flag):
        print('Flag is true!')
    if (z==None):
        return x + y
    else:
        return x + y + z
    
print(add_numbers(1, 2, flag=True))

Assign function `add_numbers` to variable `a`.
def add_numbers(x,y):
    return x+y

a = add_numbers
a(1,2)

PYTHON-TYPES AND SEQUENCES
Python has a built in function called type which will show you what type  agiven reference is.
Various types (even though python is a dynamically typed lang)- None int float str function
Typed objects have properties- they can be data and functions.
Python is built around different kind of sequences or collection types.
3 native kinds of collections- tuples, lists and dictionaries.
TUPLES
iS a sequence of variables that itself is immutable, that is their ordering  and elements can't be changed.
x = (1, 'a', 2, 'b')
type(x) # gives output tuple.
we can mix types stored in a tuple.
LISTS
are similar but they can be mutable, so you can change their length, number of elements and the element values.
example- x = [1, 'a', 2, 'b'] # in square brackets only.
Changing lists-
1. append items to the end of the list.
x.append(3.3)
print(x)
Both lists and tuples are iterable types, so you can write loops to go through them.
Example- x.append(3.3)
print(x)
Lists and tuples can be accessed as arrays, by using the square bracket operator called the indexing operator. 
First item of the list starts at position zero. We have a built in len function. (also min and max).
Python lists and tuples can have baisc mathematical operations allowed on them. + for concat.
* repeats the values of a list. 
[1]*3 # 1 will be repeated three times
There's a in operator which looks at set membership and returns a boolean value.

using the indexing operator:
i=0
while( i != len(x) ):
    print(x[i])
    i = i + 1
SLICING OF LISTS
All lists are actually lists of chars.
x = 'This is a string'
print(x[0]) #first character
print(x[0:1]) #first character, but we have explicitly set the end character
print(x[0:2]) #first two characters
This will return the last element of the string.
x[-1]
This will return the slice starting from the 4th element from the end and stopping before the 2nd element from the end.
This is a slice from the beginning of the string and stopping before the 3rd element.
x[:3]
And this is a slice starting from the 3rd element of the string and going all the way to the end.
x[3:]

Operations that you can do on a list, you can do on a string.
firstname = 'Christopher'
lastname = 'Brooks'

print(firstname + ' ' + lastname)
print(firstname*3)
print('Chris' in firstname)
Output- Christopher Brooks
ChristopherChristopherChristopher
True
String also has a function called split. It returns a list of all the words in a string, or a list split on a specific character.
firstname = 'Christopher Arthur Hansen Brooks'.split(' ')[0] # [0] selects the first element of the list
lastname = 'Christopher Arthur Hansen Brooks'.split(' ')[-1] # [-1] selects the last element of the list
print(firstname)
print(lastname)
# Christopher Arthur Hansen Brooks was split on the basis of space character and square brackets were used to index them.
DICTIONARIES
Thedy hold a labelled collection of items which do not have any ordering. For each value to be inserted, there must also be a key to get that value out.
This is similar to map in other languanges.
Example- x = {'Christopher Brooks': 'brooksch@umich.edu', 'Bill Gates': 'billg@microsoft.com'}
x['Christopher Brooks'] # Retrieve a value by using the indexing operator
Iterate over all of the keys. - for name in x:
    print(name) # us x[name] to print email
Output- Kevyn Collins-Thompson
Christopher Brooks
Bill Gates
Iterate over a set of values. - for email in x.values():
    print(email)
Output - None
brooksch@umich.edu
billg@microsoft.com
Iterate over all the itms of the list. - for name, email in x.items():
    print(name)
    print(email)
Output - Kevyn Collins-Thompson
None
Christopher Brooks
brooksch@umich.edu
Bill Gates
billg@microsoft.com
UNPACKING
In Python you can have sequence, that's a list or a tuple of values, and you can unpack those items into different variables through assignment in one statement. 
I declare four variables and assign them to the tuple. 
Underneath, Python has unpacked the tuple, and assigned each of these variables in order. 
Example - x = ('Christopher', 'Brooks', 'brooksch@umich.edu', 'Ann Arbor')
fname, lname, email, place = x

STRINGS
Unicode based strings.
When strings have to be concatenated, we have to convert non chars into strings
like str(2). But this results in a nasty looking code. Or we can use placeholders with format function for non string values and python handles them for you.
Example - sales_record = {
'price': 3.24,
'num_items': 4,
'person': 'Chris'}

sales_statement = '{} bought {} item(s) at a price of {} each for a total of {}'

print(sales_statement.format(sales_record['person'],
                             sales_record['num_items'],
                             sales_record['price'],
                             sales_record['num_items']*sales_record['price']))

READING AND WRITING CSV FILES
import csv # import to help in reading csv files.
%precision 2 # set floating point precison for printing to be 2 
with open('mpg.csv') as csvfile:  # read csv using csv.DictReader and convert it to a list of dictionaries
    mpg = list(csv.DictReader(csvfile))

len(mpg) # csv.DictReader has read in eah row of our csv file as a dictionary
# len shows that our list is comprised of 234 dictionaries    
mpg[:3] # The first three dictionaries in our list.  

Output
[{'': '1',
  'class': 'compact',
  'cty': '18',
  'cyl': '4',
  'displ': '1.8',
  'drv': 'f',
  'fl': 'p',
  'hwy': '29',
  'manufacturer': 'audi',
  'model': 'a4',
  'trans': 'auto(l5)',
  'year': '1999'}, # and three more like that
mpg[0].keys() # keys gives us the coulmn names of our csv
Output - dict_keys(['', 'drv', 'displ', 'class', 'model', 'hwy', 'cyl', 'cty', 'manufacturer', 'trans', 'year', 'fl'])
Their meanings - mpg : miles per gallon
class : car classification
cty : city mpg
cyl : # of cylinders
displ : engine displacement in liters
drv : f = front-wheel drive, r = rear wheel drive, 4 = 4wd
fl : fuel (e = ethanol E85, d = diesel, r = regular, p = premium, c = CNG)
hwy : highway mpg
manufacturer : automobile manufacturer
model : model of car
trans : type of transmission
year : model year

sum(float(d['cty'])for d in mpg) / len(mpg) # Find avg cty fuel economy in cars. All values in dictionaries are in strings, so we need to convert them to float.

cylinders = set(d['cyl'] for d in mpg)
cylinders # Use set to return the unique values for the number of cylinders the cars in our dataset have.


Here's a more complex example where we are grouping the cars by number of cylinder, and finding the average cty mpg for each group.
CtyMpgByCyl = []

for c in cylinders: # iterate over all the cylinder levels
    summpg = 0
    cyltypecount = 0
    for d in mpg: # iterate over all dictionaries
        if d['cyl'] == c: # if the cylinder level type matches,
            summpg += float(d['cty']) # add the cty mpg
            cyltypecount += 1 # increment the count
    CtyMpgByCyl.append((c, summpg / cyltypecount)) # append the tuple ('cylinder', 'avg mpg')

CtyMpgByCyl.sort(key=lambda x: x[0])
CtyMpgByCyl

Use set to reurn the unique values for the class types in our dataset.
vehicleclass = set(d['class'] for d in mpg) # what are the class types
vehicleclass

And here's an example of how to find the average hwy mpg for each class of vehicle in our dataset.

HwyMpgByClass = []

for t in vehicleclass: # iterate over all the vehicle classes
    summpg = 0
    vclasscount = 0
    for d in mpg: # iterate over all dictionaries
        if d['class'] == t: # if the cylinder amount type matches,
            summpg += float(d['hwy']) # add the hwy mpg
            vclasscount += 1 # increment the count
    HwyMpgByClass.append((t, summpg / vclasscount)) # append the tuple ('class', 'avg mpg')

HwyMpgByClass.sort(key=lambda x: x[1])
HwyMpgByClass
DATES AND TIMES
import datetime as dt
import time as tm

time returns the current time in seconds since the Epoch. (January 1st, 1970)
tm.time()

Convert the timestamp to datetime
dtnow = dt.datetime.fromtimestamp(tm.time())
dtnow

Handy datetime attributes:
dtnow.year, dtnow.month, dtnow.day, dtnow.hour, dtnow.minute, dtnow.second 
# get year, month, day, etc.from a datetime

timedelta is a duration expressing the difference between two dates
delta = dt.timedelta(days = 100) # create a timedelta of 100 days
delta

date.today returns the current local date.
today = dt.date.today()

today - delta # the date 100 days agO
Output-datetime.date(2016, 11, 1)

today > today-delta # compare dates
Output-True

OBJECTS AND MAP()
functional programming - map()
commonly used in big data and such.
cheapest = map( min, list1, list2) // min is a function
maps are iterable.

people = ['Dr. Christopher Brooks', 'Dr. Kevyn Collins-Thompson', 'Dr. VG Vinod Vydiswaran', 
'Dr. Daniel Romero']


def split_title_and_name(person):
    
title = person.split()[0]
    
lastname = person.split()[-1]
    
return '{} {}'.format(title, lastname)

list(map(split_title_and_name, people))


LAMBDA
It is python's way of reating anonymous functions
my_function = lambda a, b, c: a+b
there is only one expression in lamba
the idea is to have a quick, short lived funtion.
return of lambda is function
cant have default values inside lamda paameters and cant have complex expressions
people = ['Dr. Christopher Brooks', 'Dr. Kevyn Collins-Thompson', 'Dr. VG Vinod Vydiswaran', 
'Dr. Daniel Romero']


def split_title_and_name(person):
    
return person.split()[0] + ' ' + person.split()[-1]


#option 1

for person in people:
    
print(split_title_and_name(person) == 
(lambda x: x.split()[0] + ' ' 
+ x.split()[-1])(person))


#option 2

list(map(split_title_and_name, people)) == 
list(map(lambda person: person.split()[0] 
+ ' ' + person.split()[-1], people))

LIST COMPREHENSIONS
Python has built in support for creating sequences (iterable collections) using a more abbreviated syntax (than creating loops
to read from tuples, lists, dictionaries or files) called list comprehensions.
Condensed format

def times_tables():

    lst = []

    for i in range(10):

        for j in range (10):

            lst.append(i*j)

    return lst


times_tables() == 
[j*i for i in range(10) for j in range(10)]


lowercase = 'abcdefghijklmnopqrstuvwxyz'

digits = '0123456789'


answer = [???]

correct_answer == answer

sol
lowercase = 'abcdefghijklmnopqrstuvwxyz'

digits = '0123456789'


correct_answer = [a+b+c+d for a in lowercase for b in lowercase for c in digits for d in digits]


correct_answer[:50] # Display first 50 ids




